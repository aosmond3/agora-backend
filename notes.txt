* Reason for setting row factory to sqlite3.Row : https://stackoverflow.com/questions/44009452/what-is-the-purpose-of-the-row-factory-method-of-an-sqlite3-connection-object

* Cursor vs Connection in python sqlite3: https://stackoverflow.com/questions/6318126/why-do-you-need-to-create-a-cursor-when-querying-a-sqlite-database
In particular, the answer by AXO is useful.

* Do I need to close a Cursor object after use? No because the python
the cursors destructor function (__del__) closes it, so it will be closed
when python garbage collection occurs. However, it's recommended to close
it when you're done using it so other programs using the database can
access the database since only one cursor is allowed at a time https://nitratine.net/blog/post/python-sqlite3-basics/#closing-a-cursor

* How to explicitly make transactions (since some operations like create table are auto committed): https://stackoverflow.com/questions/49056545/transactions-of-an-sqlite3-connection-used-as-a-context-manager-are-not-atomic
^ data definition language statements do not start a transaction;

* sqlite3.connect() doesn't really establish the connection; that is done when you request the cursor
https://www.youtube.com/watch?v=14z_Tf3p2Mw&t=585 timestamp: 4:35


* using "group" when defining group table to get around the fact that group is a keyword in sql;
using "" bc this is the sql standard: https://stackoverflow.com/questions/25141090/use-backticks-or-double-quotes-with-python-and-sqlite
^^
Double quotes are used to quote identifiers like table and column names that would cause errors if not quoted. It's often easier when generating SQL statements to just automatically quote them instead of trying to figure out if they need to be or not. They're no big deal.
(https://www.reddit.com/r/sqlite/comments/g1lsyq/sqlite3_database_has_quotes_on_column_name_why/)


* I considered using sqlalchemy (abstracts away the sql & thus allows you to easily switch to a new db in the future),
but as of now decided to continue writing my own sql data_accessor for sqlite db.

* jsonify vs json.dumps: has to do with returning a proper flask response https://stackoverflow.com/questions/7907596/json-dumps-vs-flask-jsonify


* Note: since I am using the context manager for sql SELECT statements as well, I am calling
connection.commit() when it isn't necc. Not sure if there is any downside to this.
^^ IDT there is a downside, just nothing will happen if no open transaction: https://docs.python.org/3/library/sqlite3.html#connection-objects

* solution to postman 403 forbidden error: "flask run --port 8000" (https://stackoverflow.com/questions/72795799/how-to-solve-403-error-with-flask-in-python)


* good video on packaging a python project: https://www.youtube.com/watch?v=v6tALyc4C10
^ one thing of particular note is that using absolute imports (from ... import) instead of
relative imports (import ...) is smart. Just pip install the package & then start using from...

